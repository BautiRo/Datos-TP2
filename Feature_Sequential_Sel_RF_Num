{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>building_id</th>\n",
       "      <th>geo_level_1_id</th>\n",
       "      <th>geo_level_2_id</th>\n",
       "      <th>geo_level_3_id</th>\n",
       "      <th>count_floors_pre_eq</th>\n",
       "      <th>age</th>\n",
       "      <th>area_percentage</th>\n",
       "      <th>height_percentage</th>\n",
       "      <th>land_surface_condition</th>\n",
       "      <th>...</th>\n",
       "      <th>damage_grade</th>\n",
       "      <th>more_families_than_mean</th>\n",
       "      <th>older_than_mean</th>\n",
       "      <th>cant_materials</th>\n",
       "      <th>mean_damage_per_count_floor</th>\n",
       "      <th>mean_damage_level_1</th>\n",
       "      <th>height per area</th>\n",
       "      <th>mean_damage_level_1_per_plan_configuration</th>\n",
       "      <th>most_damaged_region</th>\n",
       "      <th>less_damaged_region</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>802906</td>\n",
       "      <td>6</td>\n",
       "      <td>487</td>\n",
       "      <td>12198</td>\n",
       "      <td>2</td>\n",
       "      <td>30</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>t</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>2</td>\n",
       "      <td>2.24</td>\n",
       "      <td>2.161724</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>2.169963</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>633759</td>\n",
       "      <td>6</td>\n",
       "      <td>706</td>\n",
       "      <td>12267</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>t</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>2.24</td>\n",
       "      <td>2.161724</td>\n",
       "      <td>0.714286</td>\n",
       "      <td>2.169963</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>157370</td>\n",
       "      <td>6</td>\n",
       "      <td>706</td>\n",
       "      <td>11722</td>\n",
       "      <td>2</td>\n",
       "      <td>20</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>t</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>2.24</td>\n",
       "      <td>2.161724</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.169963</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>33651</td>\n",
       "      <td>6</td>\n",
       "      <td>1210</td>\n",
       "      <td>9423</td>\n",
       "      <td>3</td>\n",
       "      <td>40</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>t</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>1</td>\n",
       "      <td>2.40</td>\n",
       "      <td>2.161724</td>\n",
       "      <td>1.400000</td>\n",
       "      <td>2.169963</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1005736</td>\n",
       "      <td>6</td>\n",
       "      <td>724</td>\n",
       "      <td>7981</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>t</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>2.24</td>\n",
       "      <td>2.161724</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.169963</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>260596</th>\n",
       "      <td>260596</td>\n",
       "      <td>665334</td>\n",
       "      <td>29</td>\n",
       "      <td>903</td>\n",
       "      <td>10668</td>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>n</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>2.04</td>\n",
       "      <td>2.078283</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>1.800000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>260597</th>\n",
       "      <td>260597</td>\n",
       "      <td>506593</td>\n",
       "      <td>29</td>\n",
       "      <td>903</td>\n",
       "      <td>10668</td>\n",
       "      <td>3</td>\n",
       "      <td>55</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>n</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>2</td>\n",
       "      <td>2.40</td>\n",
       "      <td>2.078283</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.800000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>260598</th>\n",
       "      <td>260598</td>\n",
       "      <td>994870</td>\n",
       "      <td>29</td>\n",
       "      <td>903</td>\n",
       "      <td>10668</td>\n",
       "      <td>1</td>\n",
       "      <td>30</td>\n",
       "      <td>10</td>\n",
       "      <td>4</td>\n",
       "      <td>n</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>1</td>\n",
       "      <td>2.04</td>\n",
       "      <td>2.078283</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>1.800000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>260599</th>\n",
       "      <td>260599</td>\n",
       "      <td>345899</td>\n",
       "      <td>29</td>\n",
       "      <td>903</td>\n",
       "      <td>10668</td>\n",
       "      <td>2</td>\n",
       "      <td>25</td>\n",
       "      <td>15</td>\n",
       "      <td>6</td>\n",
       "      <td>t</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>2.24</td>\n",
       "      <td>2.078283</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>1.800000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>260600</th>\n",
       "      <td>260600</td>\n",
       "      <td>163349</td>\n",
       "      <td>29</td>\n",
       "      <td>775</td>\n",
       "      <td>9382</td>\n",
       "      <td>2</td>\n",
       "      <td>40</td>\n",
       "      <td>11</td>\n",
       "      <td>6</td>\n",
       "      <td>t</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>1</td>\n",
       "      <td>2.24</td>\n",
       "      <td>2.078283</td>\n",
       "      <td>0.545455</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>260601 rows Ã— 50 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Unnamed: 0  building_id  geo_level_1_id  geo_level_2_id  \\\n",
       "0                0       802906               6             487   \n",
       "1                1       633759               6             706   \n",
       "2                2       157370               6             706   \n",
       "3                3        33651               6            1210   \n",
       "4                4      1005736               6             724   \n",
       "...            ...          ...             ...             ...   \n",
       "260596      260596       665334              29             903   \n",
       "260597      260597       506593              29             903   \n",
       "260598      260598       994870              29             903   \n",
       "260599      260599       345899              29             903   \n",
       "260600      260600       163349              29             775   \n",
       "\n",
       "        geo_level_3_id  count_floors_pre_eq  age  area_percentage  \\\n",
       "0                12198                    2   30                6   \n",
       "1                12267                    2    5                7   \n",
       "2                11722                    2   20                4   \n",
       "3                 9423                    3   40                5   \n",
       "4                 7981                    2   10                5   \n",
       "...                ...                  ...  ...              ...   \n",
       "260596           10668                    1   20                9   \n",
       "260597           10668                    3   55                7   \n",
       "260598           10668                    1   30               10   \n",
       "260599           10668                    2   25               15   \n",
       "260600            9382                    2   40               11   \n",
       "\n",
       "        height_percentage land_surface_condition  ... damage_grade  \\\n",
       "0                       5                      t  ...            3   \n",
       "1                       5                      t  ...            2   \n",
       "2                       4                      t  ...            2   \n",
       "3                       7                      t  ...            3   \n",
       "4                       5                      t  ...            2   \n",
       "...                   ...                    ...  ...          ...   \n",
       "260596                  3                      n  ...            2   \n",
       "260597                  7                      n  ...            2   \n",
       "260598                  4                      n  ...            2   \n",
       "260599                  6                      t  ...            1   \n",
       "260600                  6                      t  ...            2   \n",
       "\n",
       "       more_families_than_mean older_than_mean cant_materials  \\\n",
       "0                        False            True              2   \n",
       "1                        False           False              1   \n",
       "2                        False           False              1   \n",
       "3                        False            True              1   \n",
       "4                        False           False              1   \n",
       "...                        ...             ...            ...   \n",
       "260596                   False           False              1   \n",
       "260597                   False            True              2   \n",
       "260598                   False            True              1   \n",
       "260599                   False           False              1   \n",
       "260600                   False            True              1   \n",
       "\n",
       "       mean_damage_per_count_floor mean_damage_level_1  height per area  \\\n",
       "0                             2.24            2.161724         0.833333   \n",
       "1                             2.24            2.161724         0.714286   \n",
       "2                             2.24            2.161724         1.000000   \n",
       "3                             2.40            2.161724         1.400000   \n",
       "4                             2.24            2.161724         1.000000   \n",
       "...                            ...                 ...              ...   \n",
       "260596                        2.04            2.078283         0.333333   \n",
       "260597                        2.40            2.078283         1.000000   \n",
       "260598                        2.04            2.078283         0.400000   \n",
       "260599                        2.24            2.078283         0.400000   \n",
       "260600                        2.24            2.078283         0.545455   \n",
       "\n",
       "        mean_damage_level_1_per_plan_configuration  most_damaged_region  \\\n",
       "0                                         2.169963                    0   \n",
       "1                                         2.169963                    0   \n",
       "2                                         2.169963                    0   \n",
       "3                                         2.169963                    0   \n",
       "4                                         2.169963                    0   \n",
       "...                                            ...                  ...   \n",
       "260596                                    1.800000                    0   \n",
       "260597                                    1.800000                    0   \n",
       "260598                                    1.800000                    0   \n",
       "260599                                    1.800000                    0   \n",
       "260600                                    2.000000                    0   \n",
       "\n",
       "        less_damaged_region  \n",
       "0                         0  \n",
       "1                         0  \n",
       "2                         0  \n",
       "3                         0  \n",
       "4                         0  \n",
       "...                     ...  \n",
       "260596                    0  \n",
       "260597                    0  \n",
       "260598                    0  \n",
       "260599                    0  \n",
       "260600                    0  \n",
       "\n",
       "[260601 rows x 50 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_set = pd.read_csv('test_engineered_features.csv')\n",
    "train_set = pd.read_csv('train_engineered_features.csv')\n",
    "labelsDF = pd.read_csv('train_labels.csv')\n",
    "train_set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_set[\"land_surface_condition\"]               = test_set[\"land_surface_condition\"].astype(\"category\")\n",
    "test_set[\"foundation_type\"]                      = test_set[\"foundation_type\"].astype(\"category\")\n",
    "test_set[\"roof_type\"]                            = test_set[\"roof_type\"].astype(\"category\")\n",
    "test_set[\"ground_floor_type\"]                    = test_set[\"ground_floor_type\"].astype(\"category\")\n",
    "test_set[\"other_floor_type\"]                     = test_set[\"other_floor_type\"].astype(\"category\")\n",
    "test_set[\"position\"]                             = test_set[\"position\"].astype(\"category\")\n",
    "test_set[\"plan_configuration\"]                   = test_set[\"plan_configuration\"].astype(\"category\")\n",
    "test_set[\"legal_ownership_status\"]               = test_set[\"legal_ownership_status\"].astype(\"category\")\n",
    "\n",
    "train_set[\"land_surface_condition\"]               = train_set[\"land_surface_condition\"].astype(\"category\")\n",
    "train_set[\"foundation_type\"]                      = train_set[\"foundation_type\"].astype(\"category\")\n",
    "train_set[\"roof_type\"]                            = train_set[\"roof_type\"].astype(\"category\")\n",
    "train_set[\"ground_floor_type\"]                    = train_set[\"ground_floor_type\"].astype(\"category\")\n",
    "train_set[\"other_floor_type\"]                     = train_set[\"other_floor_type\"].astype(\"category\")\n",
    "train_set[\"position\"]                             = train_set[\"position\"].astype(\"category\")\n",
    "train_set[\"plan_configuration\"]                   = train_set[\"plan_configuration\"].astype(\"category\")\n",
    "train_set[\"legal_ownership_status\"]               = train_set[\"legal_ownership_status\"].astype(\"category\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>building_id</th>\n",
       "      <th>geo_level_1_id</th>\n",
       "      <th>geo_level_2_id</th>\n",
       "      <th>geo_level_3_id</th>\n",
       "      <th>count_floors_pre_eq</th>\n",
       "      <th>age</th>\n",
       "      <th>area_percentage</th>\n",
       "      <th>height_percentage</th>\n",
       "      <th>land_surface_condition</th>\n",
       "      <th>foundation_type</th>\n",
       "      <th>...</th>\n",
       "      <th>damage_grade</th>\n",
       "      <th>more_families_than_mean</th>\n",
       "      <th>older_than_mean</th>\n",
       "      <th>cant_materials</th>\n",
       "      <th>mean_damage_per_count_floor</th>\n",
       "      <th>mean_damage_level_1</th>\n",
       "      <th>height per area</th>\n",
       "      <th>mean_damage_level_1_per_plan_configuration</th>\n",
       "      <th>most_damaged_region</th>\n",
       "      <th>less_damaged_region</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>802906</td>\n",
       "      <td>6</td>\n",
       "      <td>487</td>\n",
       "      <td>12198</td>\n",
       "      <td>2</td>\n",
       "      <td>30</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>t</td>\n",
       "      <td>r</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>2</td>\n",
       "      <td>2.24</td>\n",
       "      <td>2.161724</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>2.169963</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>633759</td>\n",
       "      <td>6</td>\n",
       "      <td>706</td>\n",
       "      <td>12267</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>t</td>\n",
       "      <td>r</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>2.24</td>\n",
       "      <td>2.161724</td>\n",
       "      <td>0.714286</td>\n",
       "      <td>2.169963</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>157370</td>\n",
       "      <td>6</td>\n",
       "      <td>706</td>\n",
       "      <td>11722</td>\n",
       "      <td>2</td>\n",
       "      <td>20</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>t</td>\n",
       "      <td>r</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>2.24</td>\n",
       "      <td>2.161724</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.169963</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33651</td>\n",
       "      <td>6</td>\n",
       "      <td>1210</td>\n",
       "      <td>9423</td>\n",
       "      <td>3</td>\n",
       "      <td>40</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>t</td>\n",
       "      <td>r</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>1</td>\n",
       "      <td>2.40</td>\n",
       "      <td>2.161724</td>\n",
       "      <td>1.400000</td>\n",
       "      <td>2.169963</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1005736</td>\n",
       "      <td>6</td>\n",
       "      <td>724</td>\n",
       "      <td>7981</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>t</td>\n",
       "      <td>r</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>2.24</td>\n",
       "      <td>2.161724</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.169963</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 49 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   building_id  geo_level_1_id  geo_level_2_id  geo_level_3_id  \\\n",
       "0       802906               6             487           12198   \n",
       "1       633759               6             706           12267   \n",
       "2       157370               6             706           11722   \n",
       "3        33651               6            1210            9423   \n",
       "4      1005736               6             724            7981   \n",
       "\n",
       "   count_floors_pre_eq  age  area_percentage  height_percentage  \\\n",
       "0                    2   30                6                  5   \n",
       "1                    2    5                7                  5   \n",
       "2                    2   20                4                  4   \n",
       "3                    3   40                5                  7   \n",
       "4                    2   10                5                  5   \n",
       "\n",
       "  land_surface_condition foundation_type  ... damage_grade  \\\n",
       "0                      t               r  ...            3   \n",
       "1                      t               r  ...            2   \n",
       "2                      t               r  ...            2   \n",
       "3                      t               r  ...            3   \n",
       "4                      t               r  ...            2   \n",
       "\n",
       "  more_families_than_mean older_than_mean cant_materials  \\\n",
       "0                   False            True              2   \n",
       "1                   False           False              1   \n",
       "2                   False           False              1   \n",
       "3                   False            True              1   \n",
       "4                   False           False              1   \n",
       "\n",
       "  mean_damage_per_count_floor  mean_damage_level_1  height per area  \\\n",
       "0                        2.24             2.161724         0.833333   \n",
       "1                        2.24             2.161724         0.714286   \n",
       "2                        2.24             2.161724         1.000000   \n",
       "3                        2.40             2.161724         1.400000   \n",
       "4                        2.24             2.161724         1.000000   \n",
       "\n",
       "   mean_damage_level_1_per_plan_configuration  most_damaged_region  \\\n",
       "0                                    2.169963                    0   \n",
       "1                                    2.169963                    0   \n",
       "2                                    2.169963                    0   \n",
       "3                                    2.169963                    0   \n",
       "4                                    2.169963                    0   \n",
       "\n",
       "   less_damaged_region  \n",
       "0                    0  \n",
       "1                    0  \n",
       "2                    0  \n",
       "3                    0  \n",
       "4                    0  \n",
       "\n",
       "[5 rows x 49 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_set = train_set.loc[:, train_set.columns != 'Unnamed: 0']\n",
    "train_set.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['building_id', 'geo_level_1_id', 'geo_level_2_id', 'geo_level_3_id',\n",
       "       'count_floors_pre_eq', 'age', 'area_percentage', 'height_percentage',\n",
       "       'land_surface_condition', 'foundation_type', 'roof_type',\n",
       "       'ground_floor_type', 'other_floor_type', 'position',\n",
       "       'plan_configuration', 'has_superstructure_adobe_mud',\n",
       "       'has_superstructure_mud_mortar_stone', 'has_superstructure_stone_flag',\n",
       "       'has_superstructure_cement_mortar_stone',\n",
       "       'has_superstructure_mud_mortar_brick',\n",
       "       'has_superstructure_cement_mortar_brick', 'has_superstructure_timber',\n",
       "       'has_superstructure_bamboo', 'has_superstructure_rc_non_engineered',\n",
       "       'has_superstructure_rc_engineered', 'has_superstructure_other',\n",
       "       'legal_ownership_status', 'count_families', 'has_secondary_use',\n",
       "       'has_secondary_use_agriculture', 'has_secondary_use_hotel',\n",
       "       'has_secondary_use_rental', 'has_secondary_use_institution',\n",
       "       'has_secondary_use_school', 'has_secondary_use_industry',\n",
       "       'has_secondary_use_health_post', 'has_secondary_use_gov_office',\n",
       "       'has_secondary_use_use_police', 'has_secondary_use_other',\n",
       "       'damage_grade', 'more_families_than_mean', 'older_than_mean',\n",
       "       'cant_materials', 'mean_damage_per_count_floor', 'mean_damage_level_1',\n",
       "       'height per area', 'mean_damage_level_1_per_plan_configuration',\n",
       "       'most_damaged_region', 'less_damaged_region'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_set.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "X1, y1 =  train_set[[#'building_id',\n",
    "                     #'geo_level_1_id', \n",
    "                     #'geo_level_2_id', \n",
    "                     #'geo_level_3_id',\n",
    "       #'count_floors_pre_eq', \n",
    "                     #'age', \n",
    "                     #'area_percentage', \n",
    "                     #'height_percentage',\n",
    "       #'land_surface_condition', \n",
    "        #             'foundation_type', \n",
    "        #             'roof_type',\n",
    "       #'ground_floor_type', \n",
    "       #              'other_floor_type', \n",
    "       #              'position',\n",
    "       #'plan_configuration', \n",
    "               #'has_superstructure_adobe_mud',\n",
    "       #'has_superstructure_mud_mortar_stone',\n",
    "    'has_superstructure_stone_flag',\n",
    "       'has_superstructure_cement_mortar_stone',\n",
    "       'has_superstructure_mud_mortar_brick',\n",
    "       #'has_superstructure_cement_mortar_brick',\n",
    "    'has_superstructure_timber',\n",
    "       #'has_superstructure_bamboo', \n",
    "    #'has_superstructure_rc_non_engineered',\n",
    "      'has_superstructure_rc_engineered', \n",
    "    #'has_superstructure_other',\n",
    "       #'legal_ownership_status',\n",
    "    #'count_families', 'has_secondary_use',\n",
    "     #  'has_secondary_use_agriculture', \n",
    "    'has_secondary_use_hotel',\n",
    "      'has_secondary_use_rental', 'has_secondary_use_institution',\n",
    "       'has_secondary_use_school', 'has_secondary_use_industry',\n",
    "       'has_secondary_use_health_post', 'has_secondary_use_gov_office',\n",
    "       'has_secondary_use_use_police', 'has_secondary_use_other',\n",
    "       #'more_families_than_mean', \n",
    "    'older_than_mean',\n",
    "      # 'cant_materials', 'mean_damage_per_count_floor', 'mean_damage_level_1',\n",
    "       #'height per area',\n",
    "    #'mean_damage_level_1_per_plan_configuration',\n",
    "       #'most_damaged_region', 'less_damaged_region'\n",
    "]], train_set['damage_grade']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X1, y1, test_size=0.3, random_state=45)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rf_clf = RandomForestClassifier(max_depth =  6,\n",
    " min_samples_leaf = 2,\n",
    " min_samples_split = 5,\n",
    " n_estimators = 41)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(max_depth=6, min_samples_leaf=2, min_samples_split=5,\n",
       "                       n_estimators=41)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf_clf.fit(X_train,(y_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "predicciones_train = rf_clf.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5732722784308207"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import f1_score\n",
    "f1_score(y_test, predicciones_train, average='micro')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([7.41159086e-02, 5.85814928e-02, 4.64771937e-02, 1.18384797e-01,\n",
       "       3.74004056e-01, 1.17313180e-01, 6.60615129e-02, 4.58968700e-03,\n",
       "       8.03857253e-04, 1.01584605e-03, 1.75865749e-04, 4.84949307e-04,\n",
       "       5.48011214e-05, 2.75821147e-03, 1.35178641e-01])"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf_clf.feature_importances_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "predicciones_test = rf_clf.predict(test_set[[#'building_id',\n",
    "                     #'geo_level_1_id', \n",
    "                     #'geo_level_2_id', \n",
    "                     #'geo_level_3_id',\n",
    "       #'count_floors_pre_eq', \n",
    "                     #'age', \n",
    "                     #'area_percentage', \n",
    "                     #'height_percentage',\n",
    "       #'land_surface_condition', \n",
    "        #             'foundation_type', \n",
    "        #             'roof_type',\n",
    "       #'ground_floor_type', \n",
    "       #              'other_floor_type', \n",
    "       #              'position',\n",
    "       #'plan_configuration', \n",
    "               #'has_superstructure_adobe_mud',\n",
    "       #'has_superstructure_mud_mortar_stone',\n",
    "    'has_superstructure_stone_flag',\n",
    "       'has_superstructure_cement_mortar_stone',\n",
    "       'has_superstructure_mud_mortar_brick',\n",
    "       #'has_superstructure_cement_mortar_brick',\n",
    "    'has_superstructure_timber',\n",
    "       #'has_superstructure_bamboo', \n",
    "    #'has_superstructure_rc_non_engineered',\n",
    "      'has_superstructure_rc_engineered', \n",
    "    #'has_superstructure_other',\n",
    "       #'legal_ownership_status',\n",
    "    #'count_families', 'has_secondary_use',\n",
    "     #  'has_secondary_use_agriculture', \n",
    "    'has_secondary_use_hotel',\n",
    "      'has_secondary_use_rental', 'has_secondary_use_institution',\n",
    "       'has_secondary_use_school', 'has_secondary_use_industry',\n",
    "       'has_secondary_use_health_post', 'has_secondary_use_gov_office',\n",
    "       'has_secondary_use_use_police', 'has_secondary_use_other',\n",
    "       #'more_families_than_mean', \n",
    "    'older_than_mean',\n",
    "      # 'cant_materials', 'mean_damage_per_count_floor', 'mean_damage_level_1',\n",
    "       #'height per area',\n",
    "    #'mean_damage_level_1_per_plan_configuration',\n",
    "       #'most_damaged_region', 'less_damaged_region'\n",
    "]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "submission_format = pd.read_csv('submission_format.csv', index_col='building_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_submission = pd.DataFrame(data=predicciones_test,\n",
    "                             columns=submission_format.columns,\n",
    "                             index=submission_format.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>damage_grade</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>building_id</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>300051</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99355</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890251</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>745817</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>421793</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             damage_grade\n",
       "building_id              \n",
       "300051                  2\n",
       "99355                   2\n",
       "890251                  2\n",
       "745817                  2\n",
       "421793                  2"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_submission.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_submission.to_csv('PrediccionRF-ForwardSeqFeatureSelection(soloNumericos).csv')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
